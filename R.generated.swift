//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 13 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `Flashlight_Off`.
    var flashlight_Off: RswiftResources.ImageResource { .init(name: "Flashlight_Off", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Flashlight_On`.
    var flashlight_On: RswiftResources.ImageResource { .init(name: "Flashlight_On", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ScannerLine`.
    var scannerLine: RswiftResources.ImageResource { .init(name: "ScannerLine", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `done`.
    var done: RswiftResources.ImageResource { .init(name: "done", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `error`.
    var error: RswiftResources.ImageResource { .init(name: "error", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ico_back_back`.
    var ico_back_back: RswiftResources.ImageResource { .init(name: "ico_back_back", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `img_alert_danger`.
    var img_alert_danger: RswiftResources.ImageResource { .init(name: "img_alert_danger", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `img_alert_warning`.
    var img_alert_warning: RswiftResources.ImageResource { .init(name: "img_alert_warning", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `img_no_data`.
    var img_no_data: RswiftResources.ImageResource { .init(name: "img_no_data", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `img_search`.
    var img_search: RswiftResources.ImageResource { .init(name: "img_search", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `img_switch_off`.
    var img_switch_off: RswiftResources.ImageResource { .init(name: "img_switch_off", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `img_switch_on`.
    var img_switch_on: RswiftResources.ImageResource { .init(name: "img_switch_on", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `warning`.
    var warning: RswiftResources.ImageResource { .init(name: "warning", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
            var uiSceneStoryboardFile: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneStoryboardFile") ?? "Main" }
          }
        }
      }
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 7 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `FontAwesome`.
    var fontAwesome: RswiftResources.FontResource { .init(name: "FontAwesome", bundle: bundle, filename: "FontAwesome.ttf") }

    /// Font `Ionicons`.
    var ionicons: RswiftResources.FontResource { .init(name: "Ionicons", bundle: bundle, filename: "Ionicons.ttf") }

    /// Font `MaterialIcons-Regular`.
    var materialIconsRegular: RswiftResources.FontResource { .init(name: "MaterialIcons-Regular", bundle: bundle, filename: "MaterialIcons-Regular.ttf") }

    /// Font `map-icons`.
    var mapIcons: RswiftResources.FontResource { .init(name: "map-icons", bundle: bundle, filename: "map-icons.ttf") }

    /// Font `octicons`.
    var octicons: RswiftResources.FontResource { .init(name: "octicons", bundle: bundle, filename: "octicons.ttf") }

    /// Font `open-iconic`.
    var openIconic: RswiftResources.FontResource { .init(name: "open-iconic", bundle: bundle, filename: "open-iconic.ttf") }

    /// Font `themify`.
    var themify: RswiftResources.FontResource { .init(name: "themify", bundle: bundle, filename: "themify.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [fontAwesome, ionicons, materialIconsRegular, mapIcons, octicons, openIconic, themify].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 7 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `FontAwesome.ttf`.
    var fontAwesomeTtf: RswiftResources.FileResource { .init(name: "FontAwesome", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Ionicons.ttf`.
    var ioniconsTtf: RswiftResources.FileResource { .init(name: "Ionicons", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `MaterialIcons-Regular.ttf`.
    var materialIconsRegularTtf: RswiftResources.FileResource { .init(name: "MaterialIcons-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `map-icons.ttf`.
    var mapIconsTtf: RswiftResources.FileResource { .init(name: "map-icons", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `octicons.ttf`.
    var octiconsTtf: RswiftResources.FileResource { .init(name: "octicons", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `open-iconic.ttf`.
    var openIconicTtf: RswiftResources.FileResource { .init(name: "open-iconic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `themify.ttf`.
    var themifyTtf: RswiftResources.FileResource { .init(name: "themify", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `LGButton`.
    var lgButton: RswiftResources.NibReference<UIKit.UIView> { .init(name: "LGButton", bundle: bundle) }

    func validate() throws {

    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
      try self.main.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = ViewController

      let bundle: Foundation.Bundle

      let name = "Main"
      func validate() throws {

      }
    }
  }
}